name: üîç √âvaluation Technique Automatique

on:
  push:
    branches: [main, master]
    paths: ["*.html", "*.css", "*.js"]
  pull_request:
    branches: [main, master]
    paths: ["*.html", "*.css", "*.js"]

permissions:
  contents: write
  pull-requests: write

jobs:
  evaluation:
    name: üìä Analyse et Feedback HTML/CSS
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout du Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: ‚öôÔ∏è Configuration des Variables
        id: config
        run: |
          echo "üîß Chargement de la configuration..."

          # Charger la configuration depuis le fichier .evaluation-config
          if [ -f ".evaluation-config" ]; then
            echo "üìÑ Configuration trouv√©e dans .evaluation-config"
            source .evaluation-config
          fi

          # Utiliser les variables GitHub si d√©finies, sinon utiliser le fichier config, sinon valeurs par d√©faut
          COMPETENCE="${{ vars.COMPETENCE }}"
          [ -z "$COMPETENCE" ] && COMPETENCE="${COMPETENCE:-D√©veloppement Web HTML/CSS}"

          BAREME="${{ vars.BAREME }}"
          [ -z "$BAREME" ] && BAREME="${BAREME:-Structure HTML (10pts), Style CSS (10pts)}"

          FILES_TO_ANALYZE="${{ vars.FILES_TO_ANALYZE }}"
          [ -z "$FILES_TO_ANALYZE" ] && FILES_TO_ANALYZE="${FILES_TO_ANALYZE:-index.html,style.css}"

          NIVEAU="${{ vars.NIVEAU }}"
          [ -z "$NIVEAU" ] && NIVEAU="${NIVEAU:-D√©butant}"

          # Chargement des scores maximum par composant
          HTML_MAX_SCORE="${{ vars.HTML_MAX_SCORE }}"
          [ -z "$HTML_MAX_SCORE" ] && HTML_MAX_SCORE="${HTML_MAX_SCORE:-10}"

          CSS_MAX_SCORE="${{ vars.CSS_MAX_SCORE }}"
          [ -z "$CSS_MAX_SCORE" ] && CSS_MAX_SCORE="${CSS_MAX_SCORE:-10}"

          JS_MAX_SCORE="${{ vars.JS_MAX_SCORE }}"
          [ -z "$JS_MAX_SCORE" ] && JS_MAX_SCORE="${JS_MAX_SCORE:-0}"

          TOTAL_MAX_SCORE="${{ vars.TOTAL_MAX_SCORE }}"
          [ -z "$TOTAL_MAX_SCORE" ] && TOTAL_MAX_SCORE="${TOTAL_MAX_SCORE:-20}"

          # Chargement des seuils de r√©ussite
          EXCELLENT_THRESHOLD="${{ vars.EXCELLENT_THRESHOLD }}"
          [ -z "$EXCELLENT_THRESHOLD" ] && EXCELLENT_THRESHOLD="${EXCELLENT_THRESHOLD:-80}"

          GOOD_THRESHOLD="${{ vars.GOOD_THRESHOLD }}"
          [ -z "$GOOD_THRESHOLD" ] && GOOD_THRESHOLD="${GOOD_THRESHOLD:-60}"

          echo "competence=$COMPETENCE" >> $GITHUB_OUTPUT
          echo "bareme=$BAREME" >> $GITHUB_OUTPUT
          echo "files_to_analyze=$FILES_TO_ANALYZE" >> $GITHUB_OUTPUT
          echo "niveau=$NIVEAU" >> $GITHUB_OUTPUT
          echo "html_max_score=$HTML_MAX_SCORE" >> $GITHUB_OUTPUT
          echo "css_max_score=$CSS_MAX_SCORE" >> $GITHUB_OUTPUT
          echo "js_max_score=$JS_MAX_SCORE" >> $GITHUB_OUTPUT
          echo "total_max_score=$TOTAL_MAX_SCORE" >> $GITHUB_OUTPUT
          echo "excellent_threshold=$EXCELLENT_THRESHOLD" >> $GITHUB_OUTPUT
          echo "good_threshold=$GOOD_THRESHOLD" >> $GITHUB_OUTPUT

          echo "‚úÖ Configuration charg√©e:"
          echo "- Comp√©tence: $COMPETENCE"
          echo "- Bar√®me: $BAREME"
          echo "- Fichiers: $FILES_TO_ANALYZE"
          echo "- Niveau: $NIVEAU"

      - name: üîç Validation HTML avec W3C
        id: html_validation
        run: |
          echo "üîç Validation HTML avec W3C Validator..."

          # Recherche du fichier HTML principal
          HTML_FILE=""
          if [ -f "index.html" ]; then
            HTML_FILE="index.html"
          elif [ -f "main.html" ]; then
            HTML_FILE="main.html"
          else
            HTML_FILE=$(find . -name "*.html" -type f | head -1)
          fi

          if [ -z "$HTML_FILE" ]; then
            echo "‚ùå Aucun fichier HTML trouv√©"
            echo "HTML_SCORE=0" >> $GITHUB_OUTPUT
            echo "ERROR_COUNT=999" >> $GITHUB_OUTPUT
            echo "HTML_ERRORS=Aucun fichier HTML trouv√© dans le projet" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "üìÑ Validation du fichier: $HTML_FILE"

          # Validation via W3C (avec curl et retry)
          VALIDATION_RESULT=""
          for attempt in {1..3}; do
            echo "üîÑ Tentative $attempt de validation W3C..."
            
            VALIDATION_RESULT=$(curl -s -F "uploaded_file=@$HTML_FILE" \
              -F "output=json" \
              "https://validator.w3.org/nu/" 2>/dev/null || echo "error")
            
            if [ "$VALIDATION_RESULT" != "error" ] && [ -n "$VALIDATION_RESULT" ]; then
              break
            fi
            
            echo "‚ö†Ô∏è √âchec tentative $attempt, retry dans 3s..."
            sleep 3
          done

          # Traitement des r√©sultats
          if [ "$VALIDATION_RESULT" = "error" ] || [ -z "$VALIDATION_RESULT" ]; then
            echo "‚ö†Ô∏è Erreur de connexion W3C, validation locale basique..."
            
            # Validation basique locale
            BASIC_ERRORS=""
            
            # V√©rifier DOCTYPE
            if ! grep -qi "<!DOCTYPE html>" "$HTML_FILE"; then
              BASIC_ERRORS="${BASIC_ERRORS}‚ùå DOCTYPE manquant\n"
            fi
            
            # V√©rifier lang
            if ! grep -qi 'lang=' "$HTML_FILE"; then
              BASIC_ERRORS="${BASIC_ERRORS}‚ùå Attribut lang manquant sur <html>\n"
            fi
            
            # V√©rifier structure de base
            if ! grep -qi '<title>' "$HTML_FILE"; then
              BASIC_ERRORS="${BASIC_ERRORS}‚ùå Balise <title> manquante\n"
            fi
            
            if [ -n "$BASIC_ERRORS" ]; then
              ERROR_COUNT=$(echo -e "$BASIC_ERRORS" | wc -l)
              HTML_MAX="${{ steps.config.outputs.html_max_score }}"
              HTML_SCORE=$((HTML_MAX - ERROR_COUNT))
              [ $HTML_SCORE -lt 0 ] && HTML_SCORE=0
              
              echo "ERROR_COUNT=$ERROR_COUNT" >> $GITHUB_OUTPUT
              echo "HTML_SCORE=$HTML_SCORE" >> $GITHUB_OUTPUT
              echo -e "HTML_ERRORS=$BASIC_ERRORS" >> $GITHUB_OUTPUT
            else
              echo "ERROR_COUNT=0" >> $GITHUB_OUTPUT
              echo "HTML_SCORE=${{ steps.config.outputs.html_max_score }}" >> $GITHUB_OUTPUT
              echo "HTML_ERRORS=" >> $GITHUB_OUTPUT
            fi
          else
            # Traitement du JSON W3C
            echo "$VALIDATION_RESULT" > validation_result.json
            
            ERROR_COUNT=$(echo "$VALIDATION_RESULT" | jq -r '.messages | map(select(.type == "error")) | length' 2>/dev/null || echo "0")
            
            if [ "$ERROR_COUNT" = "" ] || [ "$ERROR_COUNT" = "null" ]; then
              ERROR_COUNT=0
            fi
            
            # Calcul du score HTML avec score maximum dynamique
            HTML_MAX="${{ steps.config.outputs.html_max_score }}"
            HTML_SCORE=$((HTML_MAX - ERROR_COUNT))
            [ $HTML_SCORE -lt 0 ] && HTML_SCORE=0
            
            # Extraction des erreurs
            if [ "$ERROR_COUNT" -gt 0 ]; then
              HTML_ERRORS=$(echo "$VALIDATION_RESULT" | jq -r '.messages | map(select(.type == "error")) | .[0:5] | .[] | "‚ùå Ligne \(.lastLine // "?"): \(.message)"' 2>/dev/null | head -5 || echo "Erreurs de validation d√©tect√©es")
            else
              HTML_ERRORS=""
            fi
            
            echo "ERROR_COUNT=$ERROR_COUNT" >> $GITHUB_OUTPUT
            echo "HTML_SCORE=$HTML_SCORE" >> $GITHUB_OUTPUT
            echo "HTML_ERRORS<<EOF" >> $GITHUB_OUTPUT
            echo "$HTML_ERRORS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

          echo "‚úÖ Validation HTML termin√©e - Score: $HTML_SCORE/10 (Erreurs: $ERROR_COUNT)"

      - name: üé® Analyse CSS Avanc√©e et Contextualis√©e
        id: css_validation
        run: |
          echo "üé® Analyse d√©taill√©e des crit√®res CSS selon le bar√®me..."

          # Recherche du fichier CSS principal
          CSS_FILE=""
          if [ -f "style.css" ]; then
            CSS_FILE="style.css"
          elif [ -f "styles.css" ]; then
            CSS_FILE="styles.css"
          elif [ -f "main.css" ]; then
            CSS_FILE="main.css"
          else
            CSS_FILE=$(find . -name "*.css" -type f | head -1)
          fi

          if [ -z "$CSS_FILE" ]; then
            echo "‚ùå Aucun fichier CSS trouv√©"
            echo "CSS_SCORE=0" >> $GITHUB_OUTPUT
            echo "CSS_ERRORS=Aucun fichier CSS trouv√© dans le projet" >> $GITHUB_OUTPUT
            echo "STRUCTURE_SCORE=0" >> $GITHUB_OUTPUT
            echo "TYPOGRAPHY_SCORE=0" >> $GITHUB_OUTPUT
            echo "PRACTICES_SCORE=0" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "üìÑ Analyse contextuelle du fichier: $CSS_FILE"

          # Variables pour les scores par crit√®re (sur 3 points chacun)
          STRUCTURE_SCORE=3
          TYPOGRAPHY_SCORE=3
          PRACTICES_SCORE=3
          CSS_ERRORS=""

          # ==============================================
          # CRIT√àRE 1: Structure et Organisation du CSS (3 points)
          # ==============================================
          echo "üîç Crit√®re 1: Analyse Structure et Organisation..."

          # V√©rification des variables CSS
          CSS_VARIABLES=$(grep -c '^[[:space:]]*--[a-zA-Z]' "$CSS_FILE" 2>/dev/null || echo "0")
          if [ "$CSS_VARIABLES" -eq 0 ]; then
            STRUCTURE_SCORE=$((STRUCTURE_SCORE - 1))
            CSS_ERRORS="${CSS_ERRORS}‚ùå **Structure**: Aucune variable CSS d√©tect√©e (--custom-property)\n"
          fi

          # V√©rification des commentaires organisationnels
          CSS_COMMENTS=$(grep -c '/\*.*\*/' "$CSS_FILE" 2>/dev/null || echo "0")
          if [ "$CSS_COMMENTS" -lt 3 ]; then
            STRUCTURE_SCORE=$((STRUCTURE_SCORE - 1))
            CSS_ERRORS="${CSS_ERRORS}‚ùå **Structure**: Manque de commentaires organisationnels (moins de 3)\n"
          fi

          # V√©rification de la longueur des s√©lecteurs (complexit√©)
          LONG_SELECTORS=$(grep -c '.*{' "$CSS_FILE" | awk '{if($1>0) print $1}')
          COMPLEX_SELECTORS=$(grep -E '.* .* .* .*{' "$CSS_FILE" | wc -l)
          if [ "$COMPLEX_SELECTORS" -gt 5 ]; then
            STRUCTURE_SCORE=$((STRUCTURE_SCORE - 1))
            CSS_ERRORS="${CSS_ERRORS}‚ö†Ô∏è **Structure**: S√©lecteurs trop complexes d√©tect√©s ($COMPLEX_SELECTORS occurrences)\n"
          fi

          # ==============================================
          # CRIT√àRE 2: Typographie et Couleurs (3 points)
          # ==============================================
          echo "üîç Crit√®re 2: Analyse Typographie et Couleurs..."

          # V√©rification des unit√©s relatives vs absolues
          PX_UNITS=$(grep -o '[0-9][0-9]*px' "$CSS_FILE" | wc -l)
          REL_UNITS=$(grep -o '[0-9]*\.\?[0-9]*\(rem\|em\|%\|vh\|vw\)' "$CSS_FILE" | wc -l)

          if [ "$PX_UNITS" -gt "$REL_UNITS" ]; then
            TYPOGRAPHY_SCORE=$((TYPOGRAPHY_SCORE - 1))
            CSS_ERRORS="${CSS_ERRORS}‚ùå **Typographie**: Utilisation excessive d'unit√©s fixes (${PX_UNITS} px vs ${REL_UNITS} unit√©s relatives)\n"
          fi

          # V√©rification des propri√©t√©s typographiques
          FONT_PROPERTIES=$(grep -c 'font-\|line-height\|letter-spacing' "$CSS_FILE" 2>/dev/null || echo "0")
          if [ "$FONT_PROPERTIES" -lt 3 ]; then
            TYPOGRAPHY_SCORE=$((TYPOGRAPHY_SCORE - 1))
            CSS_ERRORS="${CSS_ERRORS}‚ö†Ô∏è **Typographie**: Propri√©t√©s typographiques insuffisantes ($FONT_PROPERTIES d√©tect√©es)\n"
          fi

          # V√©rification de la coh√©rence des couleurs (hexad√©cimal vs noms)
          HEX_COLORS=$(grep -o '#[0-9a-fA-F]\{3,6\}' "$CSS_FILE" | wc -l)
          if [ "$HEX_COLORS" -lt 2 ]; then
            TYPOGRAPHY_SCORE=$((TYPOGRAPHY_SCORE - 1))
            CSS_ERRORS="${CSS_ERRORS}‚ö†Ô∏è **Couleurs**: Peu de couleurs hexad√©cimales utilis√©es ($HEX_COLORS)\n"
          fi

          # ==============================================
          # CRIT√àRE 3: Bonnes Pratiques CSS (3 points)
          # ==============================================
          echo "üîç Crit√®re 3: Analyse Bonnes Pratiques..."

          # V√©rification des classes r√©utilisables
          CLASSES=$(grep -o '\.[a-zA-Z][a-zA-Z0-9_-]*' "$CSS_FILE" | sort | uniq | wc -l)
          if [ "$CLASSES" -lt 5 ]; then
            PRACTICES_SCORE=$((PRACTICES_SCORE - 1))
            CSS_ERRORS="${CSS_ERRORS}‚ö†Ô∏è **Pratiques**: Peu de classes CSS d√©finies ($CLASSES classes)\n"
          fi

          # V√©rification des pseudo-classes
          PSEUDO_CLASSES=$(grep -c ':hover\|:focus\|:active\|:nth-child\|:first-child\|:last-child' "$CSS_FILE" 2>/dev/null || echo "0")
          if [ "$PSEUDO_CLASSES" -lt 2 ]; then
            PRACTICES_SCORE=$((PRACTICES_SCORE - 1))
            CSS_ERRORS="${CSS_ERRORS}‚ùå **Pratiques**: Pseudo-classes insuffisantes ($PSEUDO_CLASSES d√©tect√©es)\n"
          fi

          # V√©rification de la s√©paration des styles (pas de styles inline d√©tect√©s)
          HTML_FILE=""
          if [ -f "index.html" ]; then
            HTML_FILE="index.html"
          fi

          if [ -n "$HTML_FILE" ]; then
            INLINE_STYLES=$(grep -c 'style=' "$HTML_FILE" 2>/dev/null || echo "0")
            if [ "$INLINE_STYLES" -gt 0 ]; then
              PRACTICES_SCORE=$((PRACTICES_SCORE - 1))
              CSS_ERRORS="${CSS_ERRORS}‚ùå **Pratiques**: Styles inline d√©tect√©s dans HTML ($INLINE_STYLES occurrences)\n"
            fi
          fi

          # Calcul du score CSS total (Structure + Typographie + Pratiques)
          CSS_TOTAL_SCORE=$((STRUCTURE_SCORE + TYPOGRAPHY_SCORE + PRACTICES_SCORE))

          # Limitation des scores n√©gatifs
          [ $STRUCTURE_SCORE -lt 0 ] && STRUCTURE_SCORE=0
          [ $TYPOGRAPHY_SCORE -lt 0 ] && TYPOGRAPHY_SCORE=0
          [ $PRACTICES_SCORE -lt 0 ] && PRACTICES_SCORE=0
          [ $CSS_TOTAL_SCORE -lt 0 ] && CSS_TOTAL_SCORE=0

          # Sortie des r√©sultats
          echo "CSS_SCORE=$CSS_TOTAL_SCORE" >> $GITHUB_OUTPUT
          echo "STRUCTURE_SCORE=$STRUCTURE_SCORE" >> $GITHUB_OUTPUT
          echo "TYPOGRAPHY_SCORE=$TYPOGRAPHY_SCORE" >> $GITHUB_OUTPUT  
          echo "PRACTICES_SCORE=$PRACTICES_SCORE" >> $GITHUB_OUTPUT

          if [ -n "$CSS_ERRORS" ]; then
            echo "CSS_ERRORS<<EOF" >> $GITHUB_OUTPUT
            echo -e "$CSS_ERRORS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CSS_ERRORS=" >> $GITHUB_OUTPUT
          fi

          echo "‚úÖ Analyse CSS contextuelle termin√©e:"
          echo "   - Structure et Organisation: $STRUCTURE_SCORE/3"
          echo "   - Typographie et Couleurs: $TYPOGRAPHY_SCORE/3"
          echo "   - Bonnes Pratiques: $PRACTICES_SCORE/3"
          echo "   - Score CSS Total: $CSS_TOTAL_SCORE/9"

      - name: üìù G√©n√©ration du Feedback Technique
        id: generate_feedback
        env:
          HTML_SCORE: ${{ steps.html_validation.outputs.HTML_SCORE }}
          CSS_SCORE: ${{ steps.css_validation.outputs.CSS_SCORE }}
          ERROR_COUNT: ${{ steps.html_validation.outputs.ERROR_COUNT }}
          HTML_ERRORS: ${{ steps.html_validation.outputs.HTML_ERRORS }}
          CSS_ERRORS: ${{ steps.css_validation.outputs.CSS_ERRORS }}
          COMPETENCE: ${{ steps.config.outputs.competence }}
          BAREME: ${{ steps.config.outputs.bareme }}
          FILES: ${{ steps.config.outputs.files_to_analyze }}
          REPOSITORY: ${{ github.repository }}
          HTML_MAX_SCORE: ${{ steps.config.outputs.html_max_score }}
          CSS_MAX_SCORE: ${{ steps.config.outputs.css_max_score }}
          TOTAL_MAX_SCORE: ${{ steps.config.outputs.total_max_score }}
          EXCELLENT_THRESHOLD: ${{ steps.config.outputs.excellent_threshold }}
          GOOD_THRESHOLD: ${{ steps.config.outputs.good_threshold }}
          # Scores d√©taill√©s par crit√®re CSS
          STRUCTURE_SCORE: ${{ steps.css_validation.outputs.STRUCTURE_SCORE }}
          TYPOGRAPHY_SCORE: ${{ steps.css_validation.outputs.TYPOGRAPHY_SCORE }}
          PRACTICES_SCORE: ${{ steps.css_validation.outputs.PRACTICES_SCORE }}
          NIVEAU: ${{ steps.config.outputs.niveau }}
        run: |
          echo "üìù G√©n√©ration du feedback technique d√©taill√©..."

          # Calcul du score total
          TOTAL_SCORE=$((HTML_SCORE + CSS_SCORE))
          echo "TOTAL_SCORE=$TOTAL_SCORE" >> $GITHUB_OUTPUT

          # Ex√©cuter le g√©n√©rateur Python de feedback
          python3 .github/scripts/generate_feedback.py

          echo "‚úÖ Fichier FEEDBACK.md technique g√©n√©r√© avec succ√®s"

      - name: üì§ Commit et Push du Feedback
        run: |
          echo "üìù Configuration Git..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if [ -f "FEEDBACK.md" ] && [ -s "FEEDBACK.md" ]; then
            echo "‚úÖ Fichier FEEDBACK.md g√©n√©r√© ($(wc -l < FEEDBACK.md) lignes)"
            
            git add FEEDBACK.md
            git commit -m "ü§ñ Mise √† jour automatique du feedback d'√©valuation technique - HTML: ${{ steps.html_validation.outputs.HTML_SCORE }}/10 - CSS: ${{ steps.css_validation.outputs.CSS_SCORE }}/10 - Score total: ${{ steps.generate_feedback.outputs.TOTAL_SCORE }}/20 - Erreurs: ${{ steps.html_validation.outputs.ERROR_COUNT }}"
            
            echo "üöÄ Push du feedback..."
            for attempt in {1..3}; do
              if git push origin ${{ github.ref_name }}; then
                echo "‚úÖ Feedback push√© avec succ√®s (tentative $attempt)"
                break
              else
                echo "‚ö†Ô∏è √âchec push tentative $attempt, retry dans 5s..."
                sleep 5
              fi
            done
          else
            echo "‚ùå Erreur: Fichier FEEDBACK.md non cr√©√© ou vide"
            exit 1
          fi

      - name: üí¨ Commentaire sur PR (si applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const feedback = fs.readFileSync('FEEDBACK.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üîç √âvaluation Technique Automatique

            Votre code a √©t√© analys√© automatiquement. Consultez le fichier \`FEEDBACK.md\` pour le rapport d√©taill√©.

            ### üìä R√©sultats
            - **HTML**: ${{ steps.html_validation.outputs.HTML_SCORE }}/10 points
            - **CSS**: ${{ steps.css_validation.outputs.CSS_SCORE }}/10 points
            - **Score total**: ${{ steps.generate_feedback.outputs.TOTAL_SCORE }}/20 points

            ### üéØ Actions recommand√©es
            ${${{ steps.html_validation.outputs.ERROR_COUNT }} > 0 ? '‚ö†Ô∏è Corriger les erreurs HTML d√©tect√©es' : '‚úÖ HTML valide'}
            ${${{ steps.css_validation.outputs.CSS_SCORE }} < 8 ? '‚ö†Ô∏è Am√©liorer la qualit√© CSS' : '‚úÖ CSS de bonne qualit√©'}

            ---
            *ü§ñ Analyse automatique via GitHub Actions*`
            });

      - name: üìä R√©sum√© de l'√âvaluation
        if: always()
        run: |
          echo "## üìã R√©sum√© de l'√âvaluation Technique" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ R√©sultats Finaux" >> $GITHUB_STEP_SUMMARY
          echo "- **HTML**: ${{ steps.html_validation.outputs.HTML_SCORE }}/10 points" >> $GITHUB_STEP_SUMMARY
          echo "- **CSS**: ${{ steps.css_validation.outputs.CSS_SCORE }}/10 points" >> $GITHUB_STEP_SUMMARY
          echo "- **Score Total**: ${{ steps.generate_feedback.outputs.TOTAL_SCORE }}/20 points" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Analyse" >> $GITHUB_STEP_SUMMARY
          echo "- Erreurs HTML d√©tect√©es: ${{ steps.html_validation.outputs.ERROR_COUNT }}" >> $GITHUB_STEP_SUMMARY
          echo "- Fichier de feedback g√©n√©r√©: ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìÑ **Consultez le fichier \`FEEDBACK.md\` pour l'analyse compl√®te**" >> $GITHUB_STEP_SUMMARY
